1: What does SonarQube analyze in code?
A: SonarQube analyzes code for quality, bugs, vulnerabilities, duplications, and adherence to coding standards. 
   It helps maintain code health through automated static code analysis.

2: What is a code smell in SonarQube?
A: A code smell is an indication of poor coding practice that does not necessarily cause bugs but can make code more difficult to maintain and extend. 
   Examples include long methods or duplicate code.

3: How is SonarQube integrated into CI/CD pipelines?
A: SonarQube is integrated by adding a SonarQube scanner plugin or step into the CI/CD pipeline (e.g., Jenkins) to automatically analyze code quality during builds.

4: What languages does SonarQube support for analysis?
A: SonarQube supports a wide variety of languages including Java, Python, C#, JavaScript, C++, Go, Ruby, PHP, and many more through official and community plugins.

5: What is the role of Quality Gates in SonarQube?
A: A Quality Gate is a set of conditions (e.g., no critical bugs, certain test coverage) that a project must pass for the build to be considered production-ready.

6: What is the role of SonarQube server and scanner?
A: The scanner analyzes source code locally and sends results to the SonarQube server, which then stores, displays, and manages the quality reports through its dashboard.

7: What is the difference between a bug and a vulnerability in SonarQube?
A: A bug represents an error or fault in code that may cause incorrect behavior. A vulnerability is a security-related issue that could make the system vulnerable to attacks.
